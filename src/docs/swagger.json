{
    "swagger": "2.0",
    "info": {
        "description": "API para gestionar kits de sensores y sus datos.",
        "title": "API Hexagonal Go (Sensor Kits)",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.tu-soporte.com/support",
            "email": "support@tu-dominio.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080  // Cambia esto por tu host y puerto reales (puedes usar variables de entorno)",
    "basePath": "/v1             // Base path de tu API v1",
    "paths": {
        "/alerts/": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new alert record for a specific kit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alerts"
                ],
                "summary": "Register a new alert",
                "parameters": [
                    {
                        "description": "Alert data to register",
                        "name": "alert",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RegisterAlertRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Alert registered successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.Alert"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body, validation failed, invalid Kit ID, or invalid alert type",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (token missing or invalid)",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error while registering alert",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/alerts/{kit_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all alerts for a given kit ID, ordered by timestamp descending.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alerts"
                ],
                "summary": "Get alerts for a specific kit",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Kit ID",
                        "name": "kit_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Alerts retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.Alert"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid Kit ID provided",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve alerts",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/clients/": {
            "post": {
                "description": "Registers a new client in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clients"
                ],
                "summary": "Create a new client",
                "parameters": [
                    {
                        "description": "Client data to create",
                        "name": "client",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateClientRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Client created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.Client"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/clients/auth": {
            "post": {
                "description": "Logs in a client using email and password, returns a JWT token upon success.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clients Authentication"
                ],
                "summary": "Authenticate a client",
                "parameters": [
                    {
                        "description": "Client Login Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/controllers.AuthResponseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body format",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Incorrect password",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "404": {
                        "description": "Email not found",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error during login or token generation",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/clients/{id}": {
            "get": {
                "description": "Retrieves the details of a specific client by their ID. This endpoint might be public or require specific permissions not covered by standard user JWT.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clients"
                ],
                "summary": "Get client by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Client ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Client retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.Client"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid client ID provided",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "404": {
                        "description": "Client not found",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving client",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/data/airquality/": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new airquality level data record for a specific kit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Airquality Data"
                ],
                "summary": "Register airquality data record",
                "parameters": [
                    {
                        "description": "airquality data record",
                        "name": "airqualityData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RegisterAirQualityRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "airquality record registered successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.AirQualityData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body, validation failed, or invalid Kit ID",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (token missing or invalid)",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error while registering airquality record",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/data/airquality/kit/{kit_id}/minutes/{minutes}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves airquality data records for a specific kit within the last N minutes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Airquality Data"
                ],
                "summary": "Get recent airquality data records",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Kit ID",
                        "name": "kit_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of minutes ago to fetch records from",
                        "name": "minutes",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "airquality records retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.AirQualityData"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid Kit ID or minutes parameter provided",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (token missing or invalid)",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving airquality records",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/data/light/": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new light level data record for a specific kit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Light Data"
                ],
                "summary": "Register light data record",
                "parameters": [
                    {
                        "description": "Light data record",
                        "name": "lightData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RegisterLightRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Light record registered successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.LightData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body, validation failed, or invalid Kit ID",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (token missing or invalid)",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error while registering light record",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/data/light/kit/{kit_id}/minutes/{minutes}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves light data records for a specific kit within the last N minutes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Light Data"
                ],
                "summary": "Get recent light data records",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Kit ID",
                        "name": "kit_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of minutes ago to fetch records from",
                        "name": "minutes",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Light records retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.LightData"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid Kit ID or minutes parameter provided",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (token missing or invalid)",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving light records",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/data/motion/": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new motion level data record for a specific kit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Motion Data"
                ],
                "summary": "Register motion data record",
                "parameters": [
                    {
                        "description": "motion data record",
                        "name": "motionData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RegisterMotionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "motion record registered successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.MotionData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body, validation failed, or invalid Kit ID",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (token missing or invalid)",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error while registering motion record",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/data/motion/kit/{kit_id}/minutes/{minutes}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves motion data records for a specific kit within the last N minutes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Motion Data"
                ],
                "summary": "Get recent motion data records",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Kit ID",
                        "name": "kit_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of minutes ago to fetch records from",
                        "name": "minutes",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "motion records retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.MotionData"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid Kit ID or minutes parameter provided",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (token missing or invalid)",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving motion records",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/data/temperature/": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new temperature level data record for a specific kit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Temperature Data"
                ],
                "summary": "Register temperature data record",
                "parameters": [
                    {
                        "description": "temperature data record",
                        "name": "temperatureData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RegisterTemperatureRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "temperature record registered successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.TemperatureData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body, validation failed, or invalid Kit ID",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (token missing or invalid)",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error while registering temperature record",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/data/temperature/kit/{kit_id}/minutes/{minutes}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves temperature data records for a specific kit within the last N minutes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Temperature Data"
                ],
                "summary": "Get recent temperature data records",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Kit ID",
                        "name": "kit_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of minutes ago to fetch records from",
                        "name": "minutes",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "temperature records retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.TemperatureData"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid Kit ID or minutes parameter provided",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (token missing or invalid)",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving temperature records",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/kits/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all kits associated with the user identified by the JWT token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kits"
                ],
                "summary": "Get kits for the authenticated user",
                "responses": {
                    "200": {
                        "description": "Kits retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.Kit"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.AuthResponseData": {
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer"
                },
                "LastName": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "entities.AirQualityData": {
            "type": "object",
            "properties": {
                "air_quality_index": {
                    "description": "Air Quality Index reading",
                    "type": "integer"
                },
                "data_id": {
                    "description": "Corresponds to data_id PK",
                    "type": "integer"
                },
                "kit_id": {
                    "description": "Foreign key to kits table",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "Timestamp from DB default",
                    "type": "string"
                }
            }
        },
        "entities.Alert": {
            "type": "object",
            "properties": {
                "alert_id": {
                    "description": "Corresponds to alert_id PK",
                    "type": "integer"
                },
                "alert_type": {
                    "description": "Type of alert (e.g., \"under_min\", \"higher_max\")",
                    "type": "string"
                },
                "kit_id": {
                    "description": "Foreign key to kits table",
                    "type": "integer"
                },
                "message": {
                    "description": "Detailed message for the alert",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Timestamp from DB default",
                    "type": "string"
                }
            }
        },
        "entities.Client": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "entities.Kit": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "entities.LightData": {
            "type": "object",
            "properties": {
                "data_id": {
                    "description": "Corresponds to data_id PK",
                    "type": "integer"
                },
                "kit_id": {
                    "description": "Foreign key to kits table",
                    "type": "integer"
                },
                "light_level": {
                    "description": "Light level reading (e.g., lux)",
                    "type": "number"
                },
                "timestamp": {
                    "description": "Timestamp from DB default",
                    "type": "string"
                }
            }
        },
        "entities.MotionData": {
            "type": "object",
            "properties": {
                "data_id": {
                    "description": "Corresponds to data_id PK",
                    "type": "integer"
                },
                "kit_id": {
                    "description": "Foreign key to kits table",
                    "type": "integer"
                },
                "motion_detected": {
                    "description": "Whether motion was detected",
                    "type": "boolean"
                },
                "timestamp": {
                    "description": "Timestamp from DB default",
                    "type": "string"
                }
            }
        },
        "entities.TemperatureData": {
            "type": "object",
            "properties": {
                "data_id": {
                    "description": "Corresponds to data_id PK",
                    "type": "integer"
                },
                "humidity": {
                    "description": "Humidity reading",
                    "type": "number"
                },
                "kit_id": {
                    "description": "Foreign key to kits table",
                    "type": "integer"
                },
                "temperature": {
                    "description": "Temperature reading",
                    "type": "number"
                },
                "timestamp": {
                    "description": "Timestamp from DB default",
                    "type": "string"
                }
            }
        },
        "request.AuthRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "request.CreateClientRequest": {
            "type": "object",
            "required": [
                "address",
                "email",
                "last_name",
                "name",
                "password"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "request.RegisterAirQualityRequest": {
            "type": "object",
            "required": [
                "air_quality_index",
                "kit_id"
            ],
            "properties": {
                "air_quality_index": {
                    "description": "AQI must be provided and non-negative (adjust range if needed)",
                    "type": "integer",
                    "minimum": 0
                },
                "kit_id": {
                    "description": "Kit ID must be provided and positive",
                    "type": "integer"
                }
            }
        },
        "request.RegisterAlertRequest": {
            "type": "object",
            "required": [
                "alert_type",
                "kit_id",
                "message"
            ],
            "properties": {
                "alert_type": {
                    "type": "string",
                    "enum": [
                        "under_min",
                        "higher_max"
                    ]
                },
                "kit_id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "request.RegisterLightRequest": {
            "type": "object",
            "required": [
                "kit_id",
                "light_level"
            ],
            "properties": {
                "kit_id": {
                    "description": "Kit ID must be provided and positive",
                    "type": "integer"
                },
                "light_level": {
                    "description": "Light level must be provided and non-negative (adjust if needed)",
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "request.RegisterMotionRequest": {
            "type": "object",
            "required": [
                "kit_id"
            ],
            "properties": {
                "kit_id": {
                    "type": "integer"
                },
                "motion_detected": {
                    "description": "No specific validate tag needed, presence checked by ShouldBindJSON",
                    "type": "boolean"
                }
            }
        },
        "request.RegisterTemperatureRequest": {
            "type": "object",
            "required": [
                "humidity",
                "kit_id",
                "temperature"
            ],
            "properties": {
                "humidity": {
                    "description": "Use appropriate validation (e.g., numeric range 0-100) if needed",
                    "type": "number"
                },
                "kit_id": {
                    "description": "Kit ID must be provided and positive",
                    "type": "integer"
                },
                "temperature": {
                    "description": "Use appropriate validation (e.g., numeric range) if needed",
                    "type": "number"
                }
            }
        },
        "responses.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}