{
    "swagger": "2.0",
    "info": {
        "description": "API para gestionar kits de sensores y sus datos.",
        "title": "API Hexagonal Go (Sensor Kits)",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.tu-soporte.com/support",
            "email": "support@tu-dominio.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080  // Cambia esto por tu host y puerto reales (puedes usar variables de entorno)",
    "basePath": "/v1             // Base path de tu API v1",
    "paths": {
        "/v1//garden/data/": {
            "post": {
                "security": [
                    {
                        "BearerAuth // Or define a different security scheme if using API keys": []
                    }
                ],
                "description": "Receives and stores a new set of sensor readings for a specific kit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GardenData"
                ],
                "summary": "Register Garden Sensor Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token or API Key (depending on auth strategy)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sensor Data Payload",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RegisterGardenDataRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Data registered successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.GardenDataResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token/key",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "404": {
                        "description": "Kit ID not found (if validation added)",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error during registration",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/v1/alerts/": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new alert record for a specific kit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alerts"
                ],
                "summary": "Register a new alert",
                "parameters": [
                    {
                        "description": "Alert data to register",
                        "name": "alert",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RegisterAlertRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Alert registered successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.Alert"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body, validation failed, invalid Kit ID, or invalid alert type",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (token missing or invalid)",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error while registering alert",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/v1/alerts/{kit_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all alerts for a given kit ID, ordered by timestamp descending.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alerts"
                ],
                "summary": "Get alerts for a specific kit",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Kit ID",
                        "name": "kit_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Alerts retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.Alert"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid Kit ID provided",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve alerts",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/v1/garden/data/kit/{kit_id}/minutes/{minutes}": {
            "get": {
                "security": [
                    {
                        "BearerAuth // Or appropriate scheme": []
                    }
                ],
                "description": "Retrieves garden sensor data records for a specific kit recorded within the last N minutes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GardenData"
                ],
                "summary": "Get Recent Garden Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token or API Key",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Kit ID",
                        "name": "kit_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of past minutes to fetch data for",
                        "name": "minutes",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.GardenDataResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid Kit ID or Minutes parameter",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token/key",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have access to this Kit ID",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "404": {
                        "description": "Kit ID not found (if validation added)",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving data",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/v1/kits/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all kits associated with the user identified by the JWT token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kits"
                ],
                "summary": "Get kits for the authenticated user",
                "responses": {
                    "200": {
                        "description": "Kits retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.Kit"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/v1/users/": {
            "post": {
                "description": "Registers a new user with validation against an existing kit code. The kit code must NOT exist in the kits table.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User Registration Data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RegisterUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "409": {
                        "description": "Conflict - Email already exists OR Kit Code already exists",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error during registration",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/v1/users/login": {
            "post": {
                "description": "Logs in a user using email and password, returns user details and a JWT token upon success.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users Authentication"
                ],
                "summary": "Authenticate a user",
                "parameters": [
                    {
                        "description": "User Login Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/controllers.LoginResponseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body format or validation failed",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Incorrect password or invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "404": {
                        "description": "Email not found",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error during login or token generation",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/v1/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the details of a specific user by their ID. Requires authentication.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid user ID provided",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User attempting to access another user's data (if implemented)",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving user",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the first name and last name for the specified user ID. Requires authentication, and users can typically only update their own data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User Data to Update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entities.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or request body validation failed",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User attempting to update another user's data",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error during update",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.LoginResponseData": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/entities.UserResponse"
                }
            }
        },
        "entities.Alert": {
            "type": "object",
            "properties": {
                "alert_id": {
                    "description": "Corresponds to alert_id PK",
                    "type": "integer"
                },
                "alert_type": {
                    "description": "Type of alert (e.g., \"under_min\", \"higher_max\")",
                    "type": "string"
                },
                "kit_id": {
                    "description": "Foreign key to kits table",
                    "type": "integer"
                },
                "message": {
                    "description": "Detailed message for the alert",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Timestamp from DB default",
                    "type": "string"
                }
            }
        },
        "entities.GardenDataResponse": {
            "type": "object",
            "properties": {
                "data_id": {
                    "type": "integer"
                },
                "environment_humidity": {
                    "type": "number"
                },
                "ground_humidity": {
                    "type": "number"
                },
                "kit_id": {
                    "type": "integer"
                },
                "ph_level": {
                    "type": "number"
                },
                "temperature": {
                    "type": "number"
                },
                "time": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "entities.Kit": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "entities.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "request.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "request.RegisterAlertRequest": {
            "type": "object",
            "required": [
                "alert_type",
                "kit_id",
                "message"
            ],
            "properties": {
                "alert_type": {
                    "type": "string",
                    "enum": [
                        "under_min",
                        "higher_max"
                    ]
                },
                "kit_id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "request.RegisterGardenDataRequest": {
            "type": "object",
            "required": [
                "kit_id",
                "time"
            ],
            "properties": {
                "environment_humidity": {
                    "description": "Corrected spelling",
                    "type": "number"
                },
                "ground_humidity": {
                    "type": "number"
                },
                "kit_id": {
                    "description": "Ensure KitID is positive",
                    "type": "integer"
                },
                "ph_level": {
                    "type": "number"
                },
                "temperature": {
                    "description": "Add validation tags if needed (e.g., min/max)",
                    "type": "number"
                },
                "time": {
                    "description": "Require the device timestamp",
                    "type": "integer"
                }
            }
        },
        "request.RegisterUserRequest": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "kit_code",
                "last_name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "kit_code": {
                    "description": "El código de kit",
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "request.UpdateUserRequest": {
            "type": "object",
            "required": [
                "first_name",
                "last_name"
            ],
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "responses.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}